#+TITLE: Emacs Configuration

Truly inspired and copied from [[https://config.daviwil.com/emacs#table-of-contents]] 

This is an ongoing evolution of my original Emacs configuration files, inspired by a bunch of resources I've found online.

* Startup performance, package management
See =init.el= file.




* Keep .config/emacs/ clean
I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location. 
#+begin_src emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

  (message "Keep .config/emacs/ clean... loaded")
#+end_src





* Default Coding System
Avoid some errors on Windows about the coding system by setting the default to UTF-8.
#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
#+end_src




* Server Mode
Start the Emacs server from this instance so that all =emasclient= calls are routed here.
#+begin_src emacs-lisp
  (server-start)
#+end_src




* Keyboard Bindings
** ESC Cancels All
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src


** Rebind C-u
Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind the universal-argument command to another key sequence. I'm choosing C-M-u for this purpose.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src


** Evil mode configuration
Some tips can be found here:
- https://github.com/noctuid/evil-guide
- https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
#+begin_src emacs-lisp
  (defun dw/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (defun dw/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (add-hook 'evil-mode-hook 'dw/evil-hook)
    ;; after saving, force normal mode as if you've typed ESC + : + w.
    (add-hook 'after-save-hook 'evil-normal-state)
    (evil-mode 1)
    ;; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    ;; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Disable arrow keys in normal and visual modes
    (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))



  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
          (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))


  (message "Evil mode and whistles... loaded")
#+end_src


** Keybinding panel (which-key)
[[https://github.com/justbur/emacs-which-keyis][which-key]] great for getting an overview of what keybindings are available based on the prefix keys you entered.
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src


** Simplify Leader Bindings (general.el)
[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially in conjunction with Evil modes.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer dw/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer dw/ctrl-c-keys
      :prefix "C-c"))
#+end_src


** Enable keychord bing with use-package (empty)
If you type fast some keys they'll wake a chord. Configuration for use-package.
#+begin_src emacs-lisp
  ;; (use-package use-package-chords
  ;;   :config (key-chord-mode 1))
#+end_src



* General Configuration
** User Interface (UI)
Clean up Emacs' user interface, make it more minimal.
#+begin_src emacs-lisp
  ;; Thanks, but no thanks
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)       ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)
#+end_src
Line numbering vim-alike (relative numbering), and enabled everywhere.
#+begin_src emacs-lisp
  ;; show column number
  (setq column-number-mode t)

  ;; toggle display-line-numbers-mode in all buffers.
  ;; use the function, not the variable!
  (global-display-line-numbers-mode)

  ;; enable relative line numbering everywhere like vim
  (setq display-line-numbers-type 'relative)

  ;; do not display line number for specific modes
  (dolist (mode '(pdf-view-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src
Improve scrolling.
#+begin_src emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
    (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
    (setq scroll-step 1) ;; keyboard scroll one line at a time
    (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
#+end_src
Set frame transparency and maximize windows by default.
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(100 . 100)) ; Make it 90 or 95 to get a material transparency effect!
  (add-to-list 'default-frame-alist '(alpha . (100 . 100)))
  ; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ; (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (message "General configuration - UI... loaded")
#+end_src
Replace 'yes' or 'no' with 'y' and 'n'.
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src


** Theme
Gruvbox FTW. Honorable mention to =doom-palenight=.
#+begin_src emacs-lisp
  (use-package doom-themes :defer t)
  (load-theme 'doom-gruvbox t) ; final 't' loads the theme without asking to confirm
  (doom-themes-visual-bell-config) ; Enable flashing on modeline error
#+end_src


** Font
*** Set the font
#+begin_src emacs-lisp
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "CMU Bright" :height 140 :weight 'regular)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Monospace" :height 110)
#+end_src

*** Enable proper Unicode glyph support
No idea what this means but hey.
#+begin_src emacs-lisp
  (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                       (lambda (i) (string-equal (car i) block-name))
                       unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :disabled
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
     (lambda (block-name)
       (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
     '("Dingbats"
       "Emoticons"
       "Miscellaneous Symbols and Pictographs"
       "Transport and Map Symbols"))
    (unicode-fonts-setup))
#+end_src

*** Emojis in buffers
#+begin_src emacs-lisp
  (use-package emojify
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)
#+end_src


** Mode line
*** Basic customization
#+begin_src emacs-lisp
  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)
#+end_src

*** Enable Mode Diminishing
The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** smart Mode Line
Prettiy the modeline with [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]. Really need to re-evaluate the ordering of =mode-line-format=. Also not sure if =rm-excluded-modes= is needed anymore if I set up =diminish= correctly.
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'respectful)  ; Respect the theme colors
    (setq sml/mode-width 'right
          sml/name-width 60)

    (setq-default mode-line-format
                  `("%e"
                    ,()
                    mode-line-front-space
                    evil-mode-line-tag
                    mode-line-mule-info
                    mode-line-client
                    mode-line-modified
                    mode-line-remote
                    mode-line-frame-identification
                    mode-line-buffer-identification
                    sml/pos-id-separator
                    (vc-mode vc-mode)
                    " "
                                          ;mode-line-position
                    sml/pre-modes-separator
                    mode-line-modes
                    " "
                    mode-line-misc-info))

    (setq rm-excluded-modes
          (mapconcat
           'identity
                                          ; These names must start with a space!
           '(" GitGutter" " MRev" " company"
             " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
             " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
           "\\|")))
#+end_src

*** Doom Modeline
#+begin_src emacs-lisp
  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    ;:hook (after-init . doom-modeline-mode)
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 30)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-modal-icon t))

  (message "Doom modeline... loaded")
#+end_src


** Auto-Saving changed files
#+begin_src emacs-lisp
  (use-package super-save
    :disabled ;; atm I find it really annoying and slows down my workflow
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+end_src


** Auto-Reverting Changed Files
#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+end_src


** Remember last curson position
#+begin_src emacs-lisp
  ;; remember and restore the last cursor location of opened files
  (save-place-mode 1)
#+end_src


** UI Toggles
Recall that leader key is usually =<SPC>=.
#+begin_src emacs-lisp
  (dw/leader-key-def
   "t"  '(:ignore t :which-key "toggles")
   "tw" 'whitespace-mode) ; toggle whitespace visualization (whitespace-mode)
#+end_src


** Highlight and color matching braces
#+begin_src emacs-lisp
  ;; (use-package paren
  ;;   :config
  ;;   (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  ;;   (show-paren-mode 1))

  ;; there's no global mode because it can create problems.
  (use-package rainbow-delimiters
    :hook
    ; (org-mode . rainbow-delimiters-mode)
    (text-mode . rainbow-delimiters-mode)
    (prog-mode . rainbow-delimiters-mode))
#+end_src


** Displaying World Time (empty)


** Pinentry (empty)


** TRAMP (empty)


** Emacs as External Editor (empty)


* Editing configurations
** Tab widths
Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use.
#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src


** Use spaces instead of tabs for indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src


** Commenting lines
Super friggin' useful
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src


** Automatically clean whitespace
#+begin_src emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src


** Use Parinfer for Lispy languages (empty)


** Origami.el for folding code (empty)



* Configuration files
** Configuration file management with dotcrafter.el (empty)


** Helpers
#+begin_src emacs-lisp
  (defun dw/org-file-jump-to-heading (org-file heading-title)
    (interactive)
    (find-file (expand-file-name org-file))
    (goto-char (point-min))
    (search-forward (concat "* " heading-title))
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))

  (defun dw/org-file-show-headings (org-file)
    (interactive)
    (find-file (expand-file-name org-file))
    (counsel-org-goto)
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))
#+end_src


** Bindings (empty)


** Stateful Keymap with Hydra (maybe critical)
Definitely keep an eye on how it works on Github
#+begin_src emacs-lisp
  (use-package hydra
    :defer 1)
#+end_src



* Completion system
An alternative to Ivy, Counsel, Company, similar to crafted-completions.el

** Preserve Minibuffer history with savehist-mode
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))

  ;; Individual history elements can be configured separately
  ;;(put 'minibuffer-history 'history-length 25)
  ;;(put 'evil-ex-history 'history-length 50)
  ;;(put 'kill-ring 'history-length 25)
#+end_src


** All the icons and all the incons completion
Add icons the completions!

Note: the first time you load your configuration on a new machine, you'll need to run the following command interactively so that mode line icons display correctely.
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src


** Syntax Checking with Flycheck
Note all languages are supported thought. This is a list:

- Cadence
- Clojure
- C/C++/Objective C
- D
- Elixir
- Emacs Lisp
- Julia
- Haskell
- Ledger
- Mercury
- OCaml
- PHP
- Python
- Rust
- Shell scripts

However, it is possible to add more syntax checkers. See manual.
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src


** Completions with Vertico
Vertico display a VERTical Interactive COmpletion, the one you see when typing =M-x=. It is a minimal alternative to =ivy= which betters suit Emacs.
#+begin_src emacs-lisp
  (defun dw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . dw/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
#+end_src


** Completions with Company (TEST, currently disabled)
A completion front-end. I.e., it shows completions with pop-ups (frontend)
#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :hook (after-init . global-company-mode)
  ;;   :custom (setq company-backends '((company-capf company-dabbrev-code))))

  ;; (use-package company-box
  ;;   :after company
  ;;   :hook (company-mode . company-box-mode))

  ;; (use-package company-quickhelp
  ;;   :disabled
  ;;   :after company
  ;;   :config (company-quickhelp-mode))
#+end_src


** Completions in regions with Corfu
Corfu enhances completions at point (IDE-like) with a small completion popup. It a minimal alternative to =company= which betters suits Emacs.
#+begin_src emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t) ;; enable cycling for `corfu-next/previous
    (corfu-auto t) ;; enable auto completions
    (corfu-preselect-first t)

    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)       ; Always have the same width

    ;; Works with `indent-for-tab-command'. Make sure tab doesn't indent when you
    ;; want to perform completion
    (tab-always-indent 'complete)
    (completion-cycle-threshold nil)      ; Always show candidates in menu

    (corfu-auto-prefix 2) ; minimum length prefix for auto-completion
    (corfu-auto-delay 0.25) ; time in seconds before suggestion
    :init
    (global-corfu-mode))

  ;; There are commands like corfu-show-documentation/location which are useful,
  ;; and can be bounded to M-d and M-l for example.
#+end_src


** Corfu with icons with kind-icons
#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
    (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
    (kind-icon-blend-frac 0.08)

    ;; other
    (corfu-echo-documentation nil)        ; Already use corfu-doc
    (lsp-completion-provider :none)       ; Use corfu instead for lsp completions

    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'

    ;; Add hook to reset cache so the icon colors match my theme
    ;; NOTE 2022-02-05: This is a hook which resets the cache whenever I switch
    ;; the theme using my custom defined command for switching themes. If I don't
    ;; do this, then the backgound color will remain the same, meaning it will not
    ;; match the background color corresponding to the current theme. Important
    ;; since I have a light theme and dark theme I switch between. This has no
    ;; function unless you use something similar
    (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache))))
#+end_src


** Documentation in Corfu with corfu-doc
Corfu-doc is basically company-quickhelp for corfu. It shows the documentation of the selected candidate in an adjacent popup window.
#+begin_src emacs-lisp
  (use-package corfu-doc
    :after corfu
    :hook
    (corfu-mode . corfu-doc-mode)
    :custom
    (corfu-doc-auto t)
    (corfu-doc-delay 0.5)
    (corfu-doc-max-width 70)
    (corfu-doc-max-height 20)

    ;; NOTE 2022-02-05: I've also set this in the `corfu' use-package to be
    ;; extra-safe that this is set when corfu-doc is loaded. I do not want
    ;; documentation shown in both the echo area and in the `corfu-doc' popup.
    (corfu-echo-documentation nil))
#+end_src


** Cape
Cape provides Completion At Point Extensions which can be used in combination with the Corfu completion UI or the default completion UI.
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file))
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
#+end_src


** Improved candidate fitering with Orderless
This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src


** Consult commands (empty)
Consult provides practical commands based on the Emacs completion function =completing-read=. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command =consult-buffer= to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous =consult-grep= and =consult-ripgrep=, and the line-based search command =consult-line=. Some of the Consult commands are enhanced versions of built-in Emacs commands. For example the command consult-imenu presents a flat list of the Imenu with live preview, grouping and narrowing. Please take a look at the full list of commands.

This package is cool but definitely optional.
#+begin_src emacs-lisp
  ;; (defun dw/get-project-root ()
  ;;   (when (fboundp 'projectile-project-root)
  ;;     (projectile-project-root)))

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line) ; it is like a better search with preview
           ("C-M-l" . consult-imenu) ; see how powerful is with org mode!
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    ;; (consult-project-root-function #'dw/get-project-root)
    (completion-in-region-function #'consult-completion-in-region)
    :config
    (consult-preview-at-point-mode))
#+end_src


** Completion annotation with Marginalia
Marginalia provides helpful annotation for various types of minibuffer completions. You can think of it as a replacement of =ivy-rich=.
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src


** Completion actions with Embark
Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers.
You can think of embark-act as a keyboard-based version of a right-click contextual menu.
More info on the official github page.
#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

  ;; (use-package embark-consult
  ;;   :straight '(embark-consult :host github
  ;;                              :repo "oantolin/embark"
  ;;                              :files ("embark-consult.el"))
  ;;   :after (embark consult)
  ;;   :demand t
  ;;   :hook
  ;;   (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src


** Launching apps
#+begin_src emacs-lisp
  ; (use-package app-launcher)
#+end_src

#+begin_src emacs-lisp
  (message "Completion system... loaded")
#+end_src


* Jumping with Avy (empty, non-essential but cool!)


* Buffer management with Bufler (empty)


* Window management
** Frame Scaling / Zooming
The keybindings for this are =C+M+-= and =C+M+==.
#+begin_src emacs-lisp
  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))
#+end_src


** Window selection with ace-window
=ace-window= helps with easily switching between windows based on a predefined set of keys used to identify each.
#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t) ;; shows current window letter in the minibuffer
    :config
    (ace-window-display-mode 1))
#+end_src


** Window history with winner-mode (empty)


** Set margin for Modes (for org, empty)


** Control buffer placement
Emacs' default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow. The display-buffer-alist video controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.
#+begin_src emacs-lisp
(setq display-buffer-base-action
      '(display-buffer-reuse-mode-window
        display-buffer-reuse-window
        display-buffer-same-window))

;; If a popup does happen, don't resize windows to be equal-sized
(setq even-window-sizes nil)
#+end_src



* Expand Region (empty)
This module is absolutely necessary for working inside of Emacs Lisp files, especially when trying to some parent of an expression (like a setq). Makes tweaking Org agenda views much less annoying.



* Credential management (empty)


* File Browsing
** Dired
If you need some guidelines on the available keybindings (considering Evil), check out the file ~./documents/org/emacs/emacs_misclleaneous.org~.

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired
    :ensure nil ;; native package, don't search it on melpa, you won't find it
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump)) ;; super useful
                                          ; :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    ;; disable warning when using 'dired-find-alternate-file'.
    (put 'dired-find-alternate-file 'disabled nil)
    ;; in this way I use h/j/k/l vim style for dired. Great!
    (evil-collection-define-key 'normal 'dired-mode-map
      ;; alternate version is useful to avoid opening a lot of buffers
      "l" 'dired-find-alternate-file
    "h" '(lambda () (interactive) (find-alternate-file ".."))))

  ;; color names of files and folders in dired mode.
  (use-package dired-rainbow
    :defer 2
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
#+end_src

#+begin_src emacs-lisp
  (message "File browsing... loaded")
#+end_src

** Opening Files Externally (empty, a bit advanced)


* PDF
** PDF reader with pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
  :mode
  (("\\.pdf$" . pdf-view-mode))

  :config
  ;; 'pdf-tools' requires a server 'epdfinfo' to run against. This command
  ;; builds such server in order to pdf-tools in all current and future pdf-buffers.
  (pdf-tools-install))
#+end_src


* Org Mode
** Org Configuration
My personal org configation, as in old config.el file.

*** Fix <> mismatch bracket error
#+begin_src emacs-lisp
  (defun org-syntax-table-modify ()
    "Modify `org-mode-syntax-table' for the current org buffer."
    (modify-syntax-entry ?< "." org-mode-syntax-table)
    (modify-syntax-entry ?> "." org-mode-syntax-table))
#+end_src

*** org-mode use-package config
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-startup-with-inline-images t)
    :custom
    (org-hide-emphasis-markers t)
    (org-ellipsis " ▾")
    (org-confirm-babel-evaluate nil)
    :config
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.15)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "CMU Bright" :weight 'regular :height (cdr face)))

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "CMU Bright" :height 140 :weight 'regular)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Monospace" :height 110)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

    ;; org-babel

    ;; add support for TypeScript
    (use-package ob-typescript)

    ;; load the languages to be supported with org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (typescript . t)
       (js . t)))


    ;; use dvipng to preview latex snippets
    (setq org-preview-latex-default-process 'dvipng)
    ;; bigger font
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

    :hook((org-mode . visual-line-mode)
          (org-mode . variable-pitch-mode)
          (org-mode . org-num-mode)
          (org-mode . org-syntax-table-modify)))
#+end_src

*** Other org packages configuration
#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))

  ;; type <el followed by a TAB to create an elisp source block etc
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("html" . "src html"))
  (add-to-list 'org-structure-template-alist '("sol" . "src solidity"))

  ;; (use-package org-bullets
  ;;   :after org
  ;;   :hook (org-mode . org-bullets-mode))
#+end_src

*** Center Org bufferk
We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

visual-fill-column-mode is a small Emacs minor mode that mimics the effect of fill-column in visual-line-mode. Instead of wrapping lines at the window edge, which is the standard behaviour of visual-line-mode, it wraps lines at fill-column (or visual-fill-column-width, if set). That is, it turns the view on the left into the view on the right, without changing the contents of the file:
The primary purpose of visual-fill-column-mode is to wrap text at fill-column in buffers that use visual-line-mode.
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

Daviwl adds way more stuff I do not understand. However, 'evil-org' is interesting.



** Exporting to HTML
*** A simple emacs web server with 'simple-httpd'
#+begin_src emacs-lisp
  (use-package simple-httpd)
#+end_src




* Development
Configuration for various programming languages and dev tools I use.

** Git
*** magit
https://magit.vc/manual/magit/
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; turn them on when needed. atm I don't use git
  ;; (dw/leader-key-def
  ;;   "g"   '(:ignore t :which-key "git")
  ;;   "gs"  'magit-status
  ;;   "gd"  'magit-diff-unstaged
  ;;   "gc"  'magit-branch-or-checkout
  ;;   "gl"   '(:ignore t :which-key "log")
  ;;   "glc" 'magit-log-current
  ;;   "glf" 'magit-log-buffer-file
  ;;   "gb"  'magit-branch
  ;;   "gP"  'magit-push-current
  ;;   "gp"  'magit-pull-branch
  ;;   "gf"  'magit-fetch
  ;;   "gF"  'magit-fetch-all
  ;;   "gr"  'magit-rebase)
#+end_src



** Productivity
*** Smart parens
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src

**** Fuzzy finder with affe
#+begin_src emacs-lisp
  (use-package affe)

  (defun lf/fuzzy-find-in-project ()
    (interactive)
      "combines `project-dired' and `affe-find'"
    (project-dired)
    (affe-find))

  (dw/leader-key-def
    ;; fuzzy find
    "ff" 'lf/fuzzy-find-in-project)
#+end_src


** Treesitter syntax highlighting and parser generator
By adding the code below to your init, you'll automatically get tree-sitter syntax highlighting for all supported languages.
#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    ;; activate tree-sitter on any buffer containing code for which it has a parser available
    (global-tree-sitter-mode)
    ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
    ;; by switching on and off
    ; (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    :hook
    (tree-sitter-after-on-hook . tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src


** Languages
*** Language Server Support (To redo completely)
We will use =lsp-mode= instead of =eglot= since the former enables debugging, with =dap-mode=, while the latter doesn't.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :custom
    ;; Show all documenttion
    (setq lsp-eldoc-render-all t)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (js2-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; Once I get used to the whole config, uncomment this.
  (dw/leader-key-def
    "l"  '(:ignore t :which-key "lsp"))
  ;;   "ld" 'xref-find-definitions
  ;;   "lr" 'xref-find-references
  ;;   "ln" 'lsp-ui-find-next-reference
  ;;   "lp" 'lsp-ui-find-prev-reference
  ;;   "ls" 'counsel-imenu
  ;;   "le" 'lsp-ui-flycheck-list
  ;;   "lS" 'lsp-ui-sideline-mode
  ;;   "lX" 'lsp-execute-code-action

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)

  ;; Consult LSP-mode integration
  (use-package consult-lsp)
#+end_src

*** Debug adapter support
#+begin_src emacs-lisp
  (use-package dap-mode)
#+end_src

*** Meta Lisp (empty)
Here are packages that are useful across different Lisp and Scheme implementations:
#+begin_src emacs-lisp
  ;; (use-package lispy
  ;;   :hook ((emacs-lisp-mode . lispy-mode)
  ;;          (scheme-mode . lispy-mode)))

  ;; ;; (use-package evil-lispy
  ;; ;;   :hook ((lispy-mode . evil-lispy-mode)))

  ;; (use-package lispyville
  ;;   :hook ((lispy-mode . lispyville-mode))
  ;;   :config
  ;;   (lispyville-set-key-theme '(operators c-w additional
  ;;                                         additional-movement slurp/barf-cp
  ;;                                         prettify)))
#+end_src

*** Clojure (empty)

*** Common Lisp (empty)

*** Scheme (empty)

*** JavaScript and TypeScript
Set up =nvm= so that we can manage Node versions
#+begin_src emacs-lisp
  (use-package nvm
    :defer t)
#+end_src
Configure TypeScript and JavaScript language modes. Support for React included. See https://vxlabs.com/2022/06/12/typescript-development-with-emacs-tree-sitter-and-lsp-in-2022/ for more details.
#+begin_src emacs-lisp
  (use-package typescript-mode
    :after tree-sitter
    :config
    ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
    ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
    (define-derived-mode typescriptreact-mode typescript-mode
      "TypeScript TSX")

    ;; use our derived mode for tsx files
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
    ;; by default, typescript-mode is mapped to the treesitter typescript parser
    ;; use our derived mode to map both .tsx AND .ts -- typescriptreact-mode -- treesitter tsx
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

  (defun dw/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.js\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Set up proper indentation in JavaScript and JSON files
    (add-hook 'js2-mode-hook #'dw/set-js-indentation)
    (add-hook 'json-mode-hook #'dw/set-js-indentation))

  ;; Don't use built-in syntax checking, there already other tools configured
  (setq js2-mode-show-strict-warnings nil)

  (use-package apheleia
    :config
    (apheleia-global-mode +1))

  (use-package prettier
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    )
#+end_src

*** Solidity
#+begin_src emacs-lisp
  (use-package solidity-mode
    :mode "\\.sol\\'")
#+end_src
*** C/C++ (empty)
#+begin_src emacs-lisp

#+end_src

*** Emacs Lisp
#+begin_src emacs-lisp
  ;; crazy useful
  (dw/leader-key-def
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer"))

  (dw/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))
#+end_src

*** Latex
#+begin_src emacs-lisp
  ;; choose 'dvipng' to convert latex snippets into png
#+end_src



* After having done everything, do or open certain stuff
Open this file and then come back to =*scratch*= buffer:
#+begin_src emacs-lisp
  (find-file "~/.config/emacs/Emacs.org")
  (find-file "~/Documents/org")
#+end_src
